POTD-#29
TASK-1-BINARY SEARCH
APPROACH-
1.)Here,your array is sorted,So,intialize two pointers,one points to first element and another one to last element,and a mid pointer whic points at mid.
2.)Then check if target is greater than mid element then set first pointer to next of mid and if target is less than mid elememt then set last pointer to previous of mid,
and always calculate mid as (first+last)/2.
3.)If no condition satisfy from point 2 then it means that the element is equal to target,so simply return it.
4.)Otherwise return -1.
SOLUTION-
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0,h=nums.size()-1,mid;
        while(l<=h){
            mid=(l+h)/2;
            if(target>nums[mid])
            l=mid+1;
else if(target<nums[mid])
h=mid-1;
else
return mid;
        }
        return -1;
    }
};
TIME COMPLEXITY-
O(logn)
SPACE COMPLEXITY-
O(1)
