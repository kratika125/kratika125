POTD-#44
TASK-1-SWAPPING NODES IN LINKED LIST
APPROACH-
1.)Simply first move to kth node from starting and ending by taking a node and move through it until you are not at kth position and then calculate the length of list and then (length-k-1)position is same as kth 
position from end,then, swap them with the help of a integer.
SOLUTION-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* temp1=head;
        ListNode* temp2=head;
         ListNode* temp=head;
        int i=0,l=0;
        while(i<k-1){
            temp1=temp1->next;
            i++;
        }
        i=0;
        while(temp!=NULL){
        l++;
        temp=temp->next;
    } 
         while(i<l-k){
            temp2=temp2->next;
            i++;
        }
        int a=temp2->val;
        temp2->val=temp1->val;
        temp1->val=a;
        return head;
        
    }
};
TIME COMPLEXITY-
O(N)
SPACE COMPLEXITY-
O(1)
