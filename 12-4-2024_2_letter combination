POTD-#83
TASK-2-LETTER COMBINATION OF PHONE NUMBER
APPROACH-
1.)Create a map which contains string for particular number(i.e, 2,3,...),and then start traversing from digits first element and push the element from map into string and then again call function.
Base condition-
When index is greater than or equal to digits size.
SOLUTION-
class Solution {
public:
void solve(int i,vector<string>&ans,string& digits,string& check,unordered_map<char,string>mp){
 if(i>=digits.size()){
 ans.push_back(check);
 return ;
}
string str=mp[digits[i]];
for(int j=0;j<str.size();j++){
    check.push_back(str[j]);
    solve(i+1,ans,digits,check,mp);
    check.pop_back();
}
}
    vector<string> letterCombinations(string digits) {
        if(digits.size()==0)
        return {};
        unordered_map<char,string>mp={
            {'2',"abc"},
             {'3',"def"},
              {'4',"ghi"},
               {'5',"jkl"},
                {'6',"mno"},
                 {'7',"pqrs"},
                  {'8',"tuv"},
                   {'9',"wxyz"}
        };
        vector<string>ans;
        string check;
        int i=0;
        solve(i,ans,digits,check,mp);
        return ans;
    }
};
TIME COMPLEXITY-
O(4^n)
SPACE COMPLEXITY-
O(4^n+n)
