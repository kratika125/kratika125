POTD-#33
TASK-2-LONGEST SUBSEQUENCE
APPROACH-
1.)Calculate the prefix sum of array and then apply binary search
SOLUTION-
class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& q) {
        int ans=0,sum=0;
        sort(nums.begin(),nums.end());
        vector<int>v;
        for(int i=0;i<nums.size();i++){
         sum+=nums[i];
         v.push_back(sum);
        }
        vector<int>a;
        for(int i=0;i<q.size();i++){
           long long l=0,h=v.size()-1,mid;
           ans=0;
           while(l<=h){
               mid=l+(h-l)/2;
               if(v[mid]>q[i])
               h=mid-1;
               else {
                   ans=mid+1;
                   l=mid+1;
               }
            
           }
           a.push_back(ans);
        }
        return a;
    }
};
TIME COMPLEXITY-
O(nlogn)
SPACE COMPLEXITY-
O(n)
