POTD-#9
TASK-2-DESORTING
APPROACH-
1.)Start from first, if any element is less than its previous one,it means array is already desorted,so return 0.
2.)Otherwise find minimum of (differenece between elements and divide it by 2(because we perform operations on whole array)and then add 1),among all elements.
SOLUTION-
#include<bits/stdc++.h>
using namespace std;
void print()
{
    int t,ans=INT_MAX;
    cin>>t;
    vector<int>v;
    while(t--) {
        int x;
        cin>>x;
        v.push_back(x);
    }
    for(int i=0;i<v.size()-1;i++){
        if(v[i]>v[i+1]){
        cout<<0<<endl;
       return;
        }
        ans=min(ans,(v[i+1]-v[i])/2+1);
    }
    cout<<ans<<endl;
}
int main(){
int n;
cin>>n;
while(n--)
print();
return 0;
}
TIME COMPLEXITY-
O(N*t),where t=number of elements
SPACE COMPLEXITY-
O(t)
