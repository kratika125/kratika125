POTD-#22
TASK-2-LONGEST SUBSTRING WITHOUT REPEATING 
APPROACH-
1.)Create a string t,push the elements in it from s and also check the element we are pushing is already present or not.
2.)If it is already present then store maximum value from previous max and size of string t,then move pointer from first element to forward.
SOLUTION-
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int l = 0, c, i = 1, maxi =0;
        string t;
        t.push_back(s[0]);
        while (l < s.size()) {
            size_t pos = t.find(s[i]);
            if (pos != string ::npos || i>=s.size()) {
                c = t.size();
                maxi = max(c, maxi);
                t.clear();
                l++;
                i = l;
            }
            t.push_back(s[i]);
            i++;
        }
        return maxi;
    }
};
TIME COMPLEXITY-
O(n*m)
where,
n=length of s
m=length of t
SPACE COM PLEXITY-
O(m)
