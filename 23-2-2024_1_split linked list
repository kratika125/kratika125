POTD-#52
TASK-1-SPLIT LINKED LIST
APPROACH-
1.)Calculate the length of linked list and then check if it is small than k then put exactlty one node in list and then check if array size is smaller than k then insert NULL node upto array size is less than k.
2.)Otherwise if  length % k gives 0,it means the list is equally distributed easily and each part have equal size,else we have (ans=length % k ) ans number of parts of different size,so take size as length / k +1,
until ans!=0 and then traverse through head and put the list until we get size(we need) and then shift head to list(of size we want) last node.
SOLUTION-
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*>ans;
        int l=0;
        ListNode* temp=head;
        while(temp!=NULL){
            l++;
            temp=temp->next;
        }
        temp=head;
        if(l<=k){
           while(temp!=NULL){
               ListNode* curr=temp->next;
               temp->next=NULL;
               ans.push_back(temp);
               temp=curr; }
               if(ans.size()<k){
                   while(ans.size()!=k)
                   ans.push_back(NULL);
               }
        }
        else{
            int m=l%k,n=l/k,i=0,j;
             ListNode* curr=head;
            while(curr!=NULL){
                temp=curr;
                i=0;
            if(m!=0){
                m--;
               j=n+1;
            }
           else
           j=n;
           while(i<j-1){
             temp=temp->next;
             i++;
           }
         curr=temp->next;
          temp->next=NULL;
           ans.push_back(head);
           head=curr;
            }

        }
        return ans;
    }
};
TIME COMPLEXITY-
O(N^2)
SPACE COMPLEXUTY-
O(N)
