POTD-#54
TASK-1-SUBTRACTION IN LINKED LIST
APPROACH-
1.)Calculate the length of bothe list and then make their lengths equal by applying these operations-
  -->if head is 0 in list(greater length) then move forward while the head is 0 and length is not equal.
  -->Otherwise put 0 on head to make their lengths equal.
2.)Then, find the greatest  number by comapring list nodes, if list1>list2 then flag=0, otherwise flag=1.
3.)Reverse bothe list and if flag is 1 then swap bothe list and then subtract them.
4.)If the node of list1 is greater than list2 then add 10 to it and subtract 1 from its next node.
5.)Reverse the list and then check if head is 0 then move forward until head->data=0 and head->next!=NULL
  SOLUTION-
//User function Template for C++
class Solution {
public:
    Node* subLinkedList(Node* head1, Node* head2) {
         long long l1=0,l2=0;
        Node* temp1=head1;
        Node* temp2=head2;
        l1=length(temp1);
        l2=length(temp2);
        if(l1>l2){
            while(l1!=l2 && temp1->data==0){
                temp1=temp1->next;
                l1--;}
            while(l1!=l2){
                    Node* temp=new Node(0);
                    temp->next=temp2;
                    temp2=temp;
                    l2++; }
            }
            else if(l2>l1){
                while(l1!=l2 && temp2->data==0){
                    temp2=temp2->next;
                    l2--;}
                     while(l1!=l2){
                    Node* temp=new Node(0);
                    temp->next=temp1;
                    temp1=temp;
                    l1++;}
                }
            int flag=0;
          Node*  a=temp1;
            Node* b=temp2;
            if(a->data<b->data)
            flag=1;
            else{
            while(a->data==b->data && a->next!=NULL && b->next!=NULL){
            a=a->next;
            b=b->next; }
     if(a->data<b->data)
            flag=1; }
        temp1=reverse(temp1);
       Node* curr;
       if(flag==1){
           curr=reverse(temp2);
            temp2=temp1;
            temp1=curr; } 
       else
           temp2=reverse(temp2);
       curr=temp1;
            while(temp1!=NULL){
                if(temp1->data<temp2->data){
                    temp1->next->data=temp1->next->data-1;
                    temp1->data=temp1->data+10;}
                temp1->data=temp1->data-temp2->data;
                temp1=temp1->next;
                temp2=temp2->next; }
            temp1=curr;
          temp1=reverse(temp1);
       while(temp1->data==0 && temp1->next!=NULL)
           temp1=temp1->next;
        return temp1;
        }
    int length(Node* a){
        int l1=0;
         while(a!=NULL){
            a=a->next;
            l1++; }
        return l1;
    }
    Node* reverse(Node* temp1){
         Node* prev=NULL;
        Node* forward=NULL;
        while(temp1!=NULL){
        forward=temp1->next;
        temp1->next=prev;
        prev=temp1;
        temp1=forward; }
        return prev;
    }
};
TIME COMPLEXITY-
O(N)
SPACE COMPLEXITY-
O(1)
